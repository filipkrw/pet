{"version":3,"file":"extension.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,W,OCAzBF,EAAOC,QAAUC,QAAQ,O,OCAzBF,EAAOC,QAAUC,QAAQ,UCCrBC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,Q,uGCrBf,eACA,QACA,QAEA,oBAAyBQ,GACvB,IAAIC,EAAaC,EAAOC,SAASC,gBAC/B,qBACAC,UACE,IAAIC,EAAcJ,EAAOK,UAAUC,mBAAmBC,IAAI,OAE1D,IAAKH,EAAOI,SAAU,CACpB,MAAMA,QAAiBR,EAAOS,OAAOC,aAAa,CAChDC,OAAQ,6BACRC,YAAa,YACbC,MAAOC,EAAKC,KAAKC,EAAGC,UAAW,cAEjC,IAAIT,EASF,YAHAR,EAAOS,OAAOS,iBACZ,+DANIlB,EAAOK,UACVC,mBACAa,OAAO,eAAgBL,EAAKM,UAAUZ,IAAW,GACpDJ,EAASJ,EAAOK,UAAUC,mBAAmBC,IAAI,OASrD,MAAMc,QAAqBrB,EAAOS,OAAOC,aAAa,CACpDE,YAAa,iBAEf,GAAIS,EAAc,CAChB,MAAMC,EAAMR,EAAKC,KAAKX,EAAOI,SAAUa,GACvC,IACE,MAAME,QAAYvB,EAAOK,UAAUmB,iBACjCxB,EAAOyB,IAAIC,KAAKJ,GAAKK,KAAK,CAAEC,OAAQ,oBAEhC5B,EAAOS,OAAOoB,iBAAiBN,GACrC,MAAOO,GACP9B,EAAOS,OAAOS,iBACZ,6CAOVpB,EAAQiC,cAAcC,KAAKjC,IAG7B,2B","sources":["webpack://pet/external commonjs \"vscode\"","webpack://pet/external node-commonjs \"os\"","webpack://pet/external node-commonjs \"path\"","webpack://pet/webpack/bootstrap","webpack://pet/./src/extension.ts"],"sourcesContent":["module.exports = require(\"vscode\");","module.exports = require(\"os\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from \"vscode\";\nimport * as os from \"os\";\nimport * as path from \"path\";\n\nexport function activate(context: vscode.ExtensionContext) {\n  let disposable = vscode.commands.registerCommand(\n    \"pet.createSnippet\",\n    async () => {\n      let config: any = vscode.workspace.getConfiguration().get(\"pet\");\n\n      if (!config.basePath) {\n        const basePath = await vscode.window.showInputBox({\n          prompt: \"Specify snippets base path\",\n          placeHolder: \"Base Path\",\n          value: path.join(os.homedir(), \"snippets\"),\n        });\n        if (basePath) {\n          await vscode.workspace\n            .getConfiguration()\n            .update(\"pet.basePath\", path.normalize(basePath), true);\n          config = vscode.workspace.getConfiguration().get(\"pet\");\n        } else {\n          vscode.window.showErrorMessage(\n            \"You need to specify base path to create new snippets.\"\n          );\n          return;\n        }\n      }\n\n      const relativePath = await vscode.window.showInputBox({\n        placeHolder: \"Snippet Path\",\n      });\n      if (relativePath) {\n        const uri = path.join(config.basePath, relativePath);\n        try {\n          const doc = await vscode.workspace.openTextDocument(\n            vscode.Uri.file(uri).with({ scheme: \"untitled\" })\n          );\n          await vscode.window.showTextDocument(doc);\n        } catch (error) {\n          vscode.window.showErrorMessage(\n            \"Snippet on this path already exists.\"\n          );\n        }\n      }\n    }\n  );\n\n  context.subscriptions.push(disposable);\n}\n\nexport function deactivate() {}\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","disposable","vscode","commands","registerCommand","async","config","workspace","getConfiguration","get","basePath","window","showInputBox","prompt","placeHolder","value","path","join","os","homedir","showErrorMessage","update","normalize","relativePath","uri","doc","openTextDocument","Uri","file","with","scheme","showTextDocument","error","subscriptions","push"],"sourceRoot":""}